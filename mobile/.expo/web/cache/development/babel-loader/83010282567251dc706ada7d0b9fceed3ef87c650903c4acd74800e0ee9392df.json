{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { api } from \"../services/api\";\nimport { jsxs as _jsxs, jsx as _jsx } from \"react/jsx-runtime\";\nexport default function ReportInfluencerScreen(_ref) {\n  var route = _ref.route;\n  var _ref2 = route.params || {\n      username: ''\n    },\n    username = _ref2.username;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    reason = _useState2[0],\n    setReason = _useState2[1];\n  var submitReport = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      try {\n        yield api.post('/report', {\n          handle: username,\n          reason: reason\n        });\n        Alert.alert('Report Submitted', 'Thank you for your feedback');\n      } catch (err) {\n        Alert.alert('Error', 'Could not submit report');\n      }\n    });\n    return function submitReport() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsxs(Text, {\n      style: styles.title,\n      children: [\"Report @\", username]\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Reason for report (e.g., fake followers)\",\n      value: reason,\n      onChangeText: setReason,\n      multiline: true,\n      numberOfLines: 4\n    }), _jsx(Button, {\n      title: \"Submit Report\",\n      onPress: submitReport\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    marginBottom: 15\n  },\n  input: {\n    borderWidth: 1,\n    borderColor: '#ccc',\n    borderRadius: 8,\n    padding: 12,\n    height: 100,\n    textAlignVertical: 'top',\n    marginBottom: 15\n  }\n});","map":{"version":3,"names":["React","useState","View","Text","TextInput","Button","StyleSheet","Alert","api","jsxs","_jsxs","jsx","_jsx","ReportInfluencerScreen","_ref","route","_ref2","params","username","_useState","_useState2","_slicedToArray","reason","setReason","submitReport","_ref3","_asyncToGenerator","post","handle","alert","err","apply","arguments","style","styles","container","children","title","input","placeholder","value","onChangeText","multiline","numberOfLines","onPress","create","flex","padding","fontSize","fontWeight","marginBottom","borderWidth","borderColor","borderRadius","height","textAlignVertical"],"sources":["/Users/domprabhu/trustfluence/mobile/src/screens/ReportInfluencerScreen.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { View, Text, TextInput, Button, StyleSheet, Alert } from 'react-native';\nimport { api } from '../services/api';\n\nexport default function ReportInfluencerScreen({ route }) {\n  const { username } = route.params || { username: '' };\n  const [reason, setReason] = useState('');\n\n  const submitReport = async () => {\n    try {\n      await api.post('/report', { handle: username, reason });\n      Alert.alert('Report Submitted', 'Thank you for your feedback');\n    } catch (err) {\n      Alert.alert('Error', 'Could not submit report');\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Report @{username}</Text>\n      <TextInput\n        style={styles.input}\n        placeholder=\"Reason for report (e.g., fake followers)\"\n        value={reason}\n        onChangeText={setReason}\n        multiline\n        numberOfLines={4}\n      />\n      <Button title=\"Submit Report\" onPress={submitReport} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: { flex: 1, padding: 20 },\n  title: { fontSize: 20, fontWeight: 'bold', marginBottom: 15 },\n  input: { borderWidth: 1, borderColor: '#ccc', borderRadius: 8, padding: 12, height: 100, textAlignVertical: 'top', marginBottom: 15 }\n});\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,MAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,KAAA;AAExC,SAASC,GAAG;AAA0B,SAAAC,IAAA,IAAAC,KAAA,EAAAC,GAAA,IAAAC,IAAA;AAEtC,eAAe,SAASC,sBAAsBA,CAAAC,IAAA,EAAY;EAAA,IAATC,KAAK,GAAAD,IAAA,CAALC,KAAK;EACpD,IAAAC,KAAA,GAAqBD,KAAK,CAACE,MAAM,IAAI;MAAEC,QAAQ,EAAE;IAAG,CAAC;IAA7CA,QAAQ,GAAAF,KAAA,CAARE,QAAQ;EAChB,IAAAC,SAAA,GAA4BlB,QAAQ,CAAC,EAAE,CAAC;IAAAmB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAjCG,MAAM,GAAAF,UAAA;IAAEG,SAAS,GAAAH,UAAA;EAExB,IAAMI,YAAY;IAAA,IAAAC,KAAA,GAAAC,iBAAA,CAAG,aAAY;MAC/B,IAAI;QACF,MAAMlB,GAAG,CAACmB,IAAI,CAAC,SAAS,EAAE;UAAEC,MAAM,EAAEV,QAAQ;UAAEI,MAAM,EAANA;QAAO,CAAC,CAAC;QACvDf,KAAK,CAACsB,KAAK,CAAC,kBAAkB,EAAE,6BAA6B,CAAC;MAChE,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZvB,KAAK,CAACsB,KAAK,CAAC,OAAO,EAAE,yBAAyB,CAAC;MACjD;IACF,CAAC;IAAA,gBAPKL,YAAYA,CAAA;MAAA,OAAAC,KAAA,CAAAM,KAAA,OAAAC,SAAA;IAAA;EAAA,GAOjB;EAED,OACEtB,KAAA,CAACR,IAAI;IAAC+B,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,GAC5B1B,KAAA,CAACP,IAAI;MAAC8B,KAAK,EAAEC,MAAM,CAACG,KAAM;MAAAD,QAAA,GAAC,UAAQ,EAAClB,QAAQ;IAAA,CAAO,CAAC,EACpDN,IAAA,CAACR,SAAS;MACR6B,KAAK,EAAEC,MAAM,CAACI,KAAM;MACpBC,WAAW,EAAC,0CAA0C;MACtDC,KAAK,EAAElB,MAAO;MACdmB,YAAY,EAAElB,SAAU;MACxBmB,SAAS;MACTC,aAAa,EAAE;IAAE,CAClB,CAAC,EACF/B,IAAA,CAACP,MAAM;MAACgC,KAAK,EAAC,eAAe;MAACO,OAAO,EAAEpB;IAAa,CAAE,CAAC;EAAA,CACnD,CAAC;AAEX;AAEA,IAAMU,MAAM,GAAG5B,UAAU,CAACuC,MAAM,CAAC;EAC/BV,SAAS,EAAE;IAAEW,IAAI,EAAE,CAAC;IAAEC,OAAO,EAAE;EAAG,CAAC;EACnCV,KAAK,EAAE;IAAEW,QAAQ,EAAE,EAAE;IAAEC,UAAU,EAAE,MAAM;IAAEC,YAAY,EAAE;EAAG,CAAC;EAC7DZ,KAAK,EAAE;IAAEa,WAAW,EAAE,CAAC;IAAEC,WAAW,EAAE,MAAM;IAAEC,YAAY,EAAE,CAAC;IAAEN,OAAO,EAAE,EAAE;IAAEO,MAAM,EAAE,GAAG;IAAEC,iBAAiB,EAAE,KAAK;IAAEL,YAAY,EAAE;EAAG;AACtI,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}